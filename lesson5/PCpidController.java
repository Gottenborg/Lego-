
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.TextField;
import java.awt.event.*;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import lejos.pc.comm.*;
import java.io.*;

/**
 * A GUI that makes it possible to establish a Bluetooth connection
 * to an NXT controlled car. The car is then controlled by a power
 * and duration value sent to the car. The tacho counter value is
 * received and displayed after each command to the car has been performed.
 * 
 * @author Ole Caprani 24.2.12
 *
 * 
 */
public class PCpidController extends JFrame implements ActionListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = -2481242253095448939L;
	private TextField nameField = new TextField(12);
	private TextField addressField = new TextField(20);

	private String name = "NXT8"; 
	private String address = "00165310C79D";

	private TextField kpField = new TextField(10);
	private TextField kiField = new TextField(10);
	private TextField kdField = new TextField(10);
	private TextField scaleField = new TextField(10);

	private TextField valueField = new TextField(10);
	private TextField newOffsetField = new TextField(10);
	private TextField pidField = new TextField(10);

	private NXTComm nxtComm;
	private NXTInfo nxtInfo;
	private InputStream is;
	private OutputStream os;
	private DataInputStream dis;
	private DataOutputStream dos;

	private JButton connectButton = new JButton("Connect");   
	private JButton setButton = new JButton("Set");

	/**
	 * Constructor builds GUI
	 */
	public PCpidController() {		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setTitle("Control NXT");
		setSize(600,300);            

		// holds labels and text fields
		JPanel p1 = new JPanel();  
		p1.add(new JLabel("Name:"));
		p1.add(nameField);
		nameField.setText(name);
		p1.add(new JLabel("Address:"));
		p1.add(addressField);
		addressField.setText(address);

		try {
			nxtComm = NXTCommFactory.createNXTComm(NXTCommFactory.BLUETOOTH);
		} catch (NXTCommException nce) {
		}
		nxtInfo = new NXTInfo();

		// holds connect button
		JPanel p2 = new JPanel();
		p2.add(connectButton);
		connectButton.addActionListener(this);				             		

		// holds labels and text fields
		JPanel p3 = new JPanel();              
		p3.add(new JLabel("KP:"));
		p3.add(kpField);
		kpField.setText("28");
		p3.add(new JLabel("KI:"));
		p3.add(kiField);
		kiField.setText("4");
		p3.add(new JLabel("KD:"));
		p3.add(kdField);
		kdField.setText("33");
		p3.add(new JLabel("Scale:"));
		p3.add(scaleField);
		scaleField.setText("18");

		// hold new offset field
		JPanel p6 = new JPanel();
		p6.add(new JLabel("value:"));
		valueField.setEditable(false);
		p6.add(valueField);
		p6.add(new JLabel("new offset:"));
		p6.add(newOffsetField);

		// holds go button
		JPanel p4 = new JPanel();
		p4.add(setButton);
		setButton.addActionListener(this);

		// holds PID value field.
		JPanel p5 = new JPanel();              
		p5.add(new JLabel("pid_val:"));
		pidField.setEditable(false);
		p5.add(pidField);

		// North area of the frame
		JPanel panel = new JPanel();  
		panel.setLayout(new GridLayout(7,1));
		panel.add(p1);
		panel.add(p2);
		panel.add(p3);
		panel.add(p6);
		panel.add(p4);
		panel.add(p5);
		add(panel,BorderLayout.NORTH);

	}
	/**
	 * Required by action listener; 
	 * only action is generated by the get Length button
	 */	
	public void actionPerformed(ActionEvent e) {
		if(e.getSource()== connectButton) {
			String name = nameField.getText();
			String address = addressField.getText();
			nxtInfo.name = name;
			nxtInfo.deviceAddress = address;
			try {
				nxtComm.open(nxtInfo);
				is = nxtComm.getInputStream();
				os = nxtComm.getOutputStream();
				dis = new DataInputStream(is);
				dos = new DataOutputStream(os);
			} catch (Exception ex) {
			}
		}	  
		if(e.getSource() == setButton) {
			try {
				String kpString = kpField.getText();
				int kp = new Integer(kpString).intValue();        
				dos.writeInt(kp);
				String kiString = kiField.getText();
				int ki = new Integer(kiString).intValue();        
				dos.writeInt(ki);
				String kdString = kdField.getText();
				int kd = new Integer(kdString).intValue();        
				dos.writeInt(kd);
				String scaleString = scaleField.getText();
				int scale = new Integer(scaleString).intValue();        
				dos.writeInt(scale);
				String newOffsetString = newOffsetField.getText();
				int newOffset = new Integer(newOffsetString).intValue();        
				dos.writeInt(newOffset);
				dos.flush();
			} catch (Exception ex) {				
			}           
		}
	}

	/**
	 * Initialize the display Frame
	 */		
	public static void main(String[] args) {
		PCpidController frame = new PCpidController();
		frame.setVisible(true);

		// Read PID and light value and update display.
		while (true) frame.refreshValues();
	}

	private void refreshValues() {
		try {			
			int pid = dis.readInt();
			pidField.setText("" + pid);
			int value = dis.readInt();
			valueField.setText("" + value);
		} catch (Exception e) {

		}
	}
}	