
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.TextField;
import java.awt.event.*;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import lejos.pc.comm.*;
import java.io.*;

/**
 * A GUI that makes it possible to establish a Bluetooth connection
 * to an NXT running the RCparamTracker program. Two parameters in
 * the tracker can be set in the GUI and send to the tracker. 
 * 
 * @author Ole Caprani 27.1.15
 *
 * 
 */
public class TrackerController extends JFrame implements ActionListener
{
   private TextField nameField = new TextField(12);
   private TextField addressField = new TextField(20);

   private String name = "NXT8"; 
   private String address = "00165310C79D";
   
   private TextField minPowerField = new TextField(10);
   private TextField gainField     = new TextField(10);
     
   private NXTComm nxtComm;
   private NXTInfo nxtInfo;
   private OutputStream os;
   private DataOutputStream dos;
   
   private JButton connectButton = new JButton("Connect");   
   private JButton goButton = new JButton("Go");

   /**
    * Constructor builds GUI
    */
   public TrackerController() 
   {		
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      setTitle("Control Tracker");
      setSize(500,300);
      
      // Labels and text fields for NXT
      JPanel p1 = new JPanel();  
      p1.add(new JLabel("Name:"));
      p1.add(nameField);
      nameField.setText(name);
      p1.add(new JLabel("Address:"));
      p1.add(addressField);
      addressField.setText(address);
     
      try
      {
         nxtComm = NXTCommFactory.createNXTComm(NXTCommFactory.BLUETOOTH);
      }
      catch (NXTCommException nce) {
      }
      nxtInfo = new NXTInfo();
     
      // Connect button
      JPanel p2 = new JPanel();
      p2.add(connectButton);
      connectButton.addActionListener(this);
      
      // Labels and text fields for parameters
      JPanel p3 = new JPanel();  
      p3.add(new JLabel("minPower:"));
      p3.add(minPowerField);
      minPowerField.setText("50");
      p3.add(new JLabel("Gain:"));
      p3.add(gainField);
      gainField.setText("1.0");

      // Go button
      JPanel p4 = new JPanel();
      p4.add(goButton);
      goButton.addActionListener(this);
            
      // North area of the frame
      JPanel panel = new JPanel();  
      panel.setLayout(new GridLayout(5,1));
      panel.add(p1);
      panel.add(p2);
      panel.add(p3);
      panel.add(p4);
      add(panel,BorderLayout.NORTH);

   }
   /**
    * Required by action listener; 
    * only action is generated by the Connect and Go button
    */	
   public void actionPerformed(ActionEvent e)
   {
      if(e.getSource()== connectButton)
      {
         String name = nameField.getText();
         String address = addressField.getText();
         nxtInfo.name = name;
         nxtInfo.deviceAddress = address;
         try
         {
            nxtComm.open(nxtInfo);
            os = nxtComm.getOutputStream();
      	    dos = new DataOutputStream(os);
         }
         catch (Exception ex) 
         {
         }
      }	  
	   
      if(e.getSource()== goButton)
      {
    	 try
         {
    	    String minPowerString = minPowerField.getText();
    	    int minPower = new Integer(minPowerString).intValue();        
            dos.writeInt(minPower);
            dos.flush();
    	    String gainString = gainField.getText();
    	    float gain = new Float(gainString).floatValue();        
            dos.writeFloat(gain);
            dos.flush();
         }
         catch (Exception ex) 
    	 {
         }           
      }
   }
   
   /**
    * Initialize the display Frame
    */		
   public static void main(String[] args)
   {
      TrackerController frame = new TrackerController();
      frame.setVisible(true);
   }
}	
